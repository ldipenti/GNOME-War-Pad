%%
headers
#include <Python.h>
#include <pygobject.h>
#include "global.h"
#include "gwp-engspec.h"
#include "gwp-hullspec.h"
#include "gwp-beamspec.h"
#include "gwp-torpspec.h"
#include "gwp-object.h"
#include "gwp-planet.h"
#include "gwp-flying-object.h"
#include "gwp-ion-storm.h"
#include "gwp-ship.h"
#include "gwp-starbase.h"
#include "gwp-location.h"
#include "gwp-minefield.h"
#include "gwp-ui.h"
#include "gwp-py-functions.h"
%%
modulename gwp
%%
import gobject.GObject as PyGObject_Type
%%
ignore-glob
  *_get_type
%%
override gwp_ship_get_waypoint noargs
static PyObject *
_wrap_gwp_ship_get_waypoint (PyGObject *self)
{
  int wp_x, wp_y;
  
  gwp_ship_get_waypoint (GWP_SHIP (self->obj), &wp_x, &wp_y);
  
  return Py_BuildValue("(ii)", wp_x, wp_y); 
}
%%
override ship_get_list noargs
static PyObject *
_wrap_ship_get_list (PyObject *self)
{
  PyObject *ret = PyDict_New();

  static void add_ship (gpointer key, gpointer value, gpointer user_data) {
    PyObject *dict = (PyObject *)user_data;
    GwpShip *ship = GWP_SHIP(value);

    PyDict_SetItem (dict, 
		    PyInt_FromLong(gwp_object_get_id(GWP_OBJECT(ship))),
		    pygobject_new((GObject *)ship));
  }
  
  g_hash_table_foreach (ship_list, (GHFunc)add_ship, (gpointer)ret);

  return ret;
}
%%
override planet_get_list noargs
static PyObject *
_wrap_planet_get_list (PyObject *self)
{
  PyObject *ret = PyDict_New();

  static void add_planet (gpointer key, gpointer value, gpointer user_data) {
    PyObject *dict = (PyObject *)user_data;
    GwpPlanet *planet = GWP_PLANET(value);

    PyDict_SetItem (dict, 
		    PyInt_FromLong(gwp_object_get_id(GWP_OBJECT(planet))),
		    pygobject_new((GObject *)planet));
  }
  
  g_hash_table_foreach (planet_list, (GHFunc)add_planet, (gpointer)ret);

  return ret;
}
%%
override plugin_reg_key_f
PyObject *
_wrap_plugin_reg_key_f (PyObject *self, PyObject *args)
{
  gchar *file;

  PyArg_ParseTuple (args, "s", &file);
  g_assert (file != NULL);
  g_message ("uepa!! -> %s", file);
  game_set_f_key(game_state, file);

  Py_INCREF(Py_None);
  return Py_None;
}
%%
override hullspec_get_list noargs
static PyObject *
_wrap_hullspec_get_list (PyObject *self)
{
  PyObject *ret = PyDict_New();

  static void add_hullspec (gpointer value, gpointer user_data) {
    PyObject *dict = (PyObject *)user_data;
    GwpHullSpec *hullspec = GWP_HULLSPEC(value);

    PyDict_SetItem (dict, 
		    PyInt_FromLong(gwp_hullspec_get_id(hullspec)),
		    pygobject_new((GObject *)hullspec));
  }
  
  g_slist_foreach (hullspec_list, (GFunc)add_hullspec, (gpointer)ret);

  return ret;
}
%%
override engspec_get_list noargs
static PyObject *
_wrap_engspec_get_list (PyObject *self)
{
  PyObject *ret = PyDict_New();

  static void add_engspec (gpointer value, gpointer user_data) {
    PyObject *dict = (PyObject *)user_data;
    GwpEngSpec *engspec = GWP_ENGSPEC(value);

    PyDict_SetItem (dict, 
		    PyInt_FromLong(gwp_engspec_get_id(engspec)),
		    pygobject_new((GObject *)engspec));
  }
  
  g_slist_foreach (engspec_list, (GFunc)add_engspec, (gpointer)ret);

  return ret;
}
%%
override beamspec_get_list noargs
static PyObject *
_wrap_beamspec_get_list (PyObject *self)
{
  PyObject *ret = PyDict_New();

  static void add_beamspec (gpointer value, gpointer user_data) {
    PyObject *dict = (PyObject *)user_data;
    GwpBeamSpec *beamspec = GWP_BEAMSPEC(value);

    PyDict_SetItem (dict, 
		    PyInt_FromLong(gwp_beamspec_get_id(beamspec)),
		    pygobject_new((GObject *)beamspec));
  }
  
  g_slist_foreach (beamspec_list, (GFunc)add_beamspec, (gpointer)ret);

  return ret;
}
%%
override torpspec_get_list noargs
static PyObject *
_wrap_torpspec_get_list (PyObject *self)
{
  PyObject *ret = PyDict_New();

  static void add_torpspec (gpointer value, gpointer user_data) {
    PyObject *dict = (PyObject *)user_data;
    GwpTorpSpec *torpspec = GWP_TORPSPEC(value);

    PyDict_SetItem (dict, 
		    PyInt_FromLong(gwp_torpspec_get_id(torpspec)),
		    pygobject_new((GObject *)torpspec));
  }
  
  g_slist_foreach (torpspec_list, (GFunc)add_torpspec, (gpointer)ret);

  return ret;
}
